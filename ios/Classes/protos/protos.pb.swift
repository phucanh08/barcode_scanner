// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/protos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// AUTO GENERATED FILE, DO NOT EDIT!
//
// Generated by /Users/anhlp/Desktop/barcode_scanner/generate_proto.sh

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// protos/barcode_format.proto
enum BarcodeFormat: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case all // = 0

  /// 1D Barcode
  case code39 // = 1
  case code93 // = 2
  case code128 // = 3
  case itf // = 4
  case upce // = 5
  case ean8 // = 6
  case ean13 // = 7
  case codaBar // = 8
  case gs1DataBar // = 9
  case gs1DataBarExtended // = 10

  /// 2D Barcode
  case qr // = 11
  case pdf417 // = 12
  case dataMatrix // = 13
  case aztec // = 14
  case unknown // = 15
  case UNRECOGNIZED(Int)

  init() {
    self = .all
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .all
    case 1: self = .code39
    case 2: self = .code93
    case 3: self = .code128
    case 4: self = .itf
    case 5: self = .upce
    case 6: self = .ean8
    case 7: self = .ean13
    case 8: self = .codaBar
    case 9: self = .gs1DataBar
    case 10: self = .gs1DataBarExtended
    case 11: self = .qr
    case 12: self = .pdf417
    case 13: self = .dataMatrix
    case 14: self = .aztec
    case 15: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .all: return 0
    case .code39: return 1
    case .code93: return 2
    case .code128: return 3
    case .itf: return 4
    case .upce: return 5
    case .ean8: return 6
    case .ean13: return 7
    case .codaBar: return 8
    case .gs1DataBar: return 9
    case .gs1DataBarExtended: return 10
    case .qr: return 11
    case .pdf417: return 12
    case .dataMatrix: return 13
    case .aztec: return 14
    case .unknown: return 15
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [BarcodeFormat] = [
    .all,
    .code39,
    .code93,
    .code128,
    .itf,
    .upce,
    .ean8,
    .ean13,
    .codaBar,
    .gs1DataBar,
    .gs1DataBarExtended,
    .qr,
    .pdf417,
    .dataMatrix,
    .aztec,
    .unknown,
  ]

}

/// protos/camera_settings.proto
enum ResolutionPreset: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case hd1280X720 // = 0
  case hd1920X1080 // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .hd1280X720
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hd1280X720
    case 1: self = .hd1920X1080
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .hd1280X720: return 0
    case .hd1920X1080: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ResolutionPreset] = [
    .hd1280X720,
    .hd1920X1080,
  ]

}

enum CameraPosition: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case font // = 0
  case back // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .font
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .font
    case 1: self = .back
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .font: return 0
    case .back: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [CameraPosition] = [
    .font,
    .back,
  ]

}

/// protos/scan_result.proto
enum ResultType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case barcode // = 0
  case cancelled // = 1
  case error // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .barcode
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .barcode
    case 1: self = .cancelled
    case 2: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .barcode: return 0
    case .cancelled: return 1
    case .error: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ResultType] = [
    .barcode,
    .cancelled,
    .error,
  ]

}

/// protos/barcode.proto
struct BarcodeResult: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var format: BarcodeFormat = .all

  var rawValue: String = String()

  var rawBytes: Data = Data()

  var boundingBox: Rect {
    get {return _boundingBox ?? Rect()}
    set {_boundingBox = newValue}
  }
  /// Returns true if `boundingBox` has been explicitly set.
  var hasBoundingBox: Bool {return self._boundingBox != nil}
  /// Clears the value of `boundingBox`. Subsequent reads from it will return its default value.
  mutating func clearBoundingBox() {self._boundingBox = nil}

  var cornerPoints: [Point] = []

  var timestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _boundingBox: Rect? = nil
}

struct Rect: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var left: Float = 0

  var top: Float = 0

  var right: Float = 0

  var bottom: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Point: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float = 0

  var y: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CameraSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resolution Preset
  var resolutionPreset: ResolutionPreset = .hd1280X720

  /// Camera Position
  var cameraPosition: CameraPosition = .font

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// protos/configuration.proto
struct Configuration: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Restricts the barcode format which should be read
  var barcodeFormats: [BarcodeFormat] = []

  /// CameraSettings
  var cameraSettings: CameraSettings {
    get {return _cameraSettings ?? CameraSettings()}
    set {_cameraSettings = newValue}
  }
  /// Returns true if `cameraSettings` has been explicitly set.
  var hasCameraSettings: Bool {return self._cameraSettings != nil}
  /// Clears the value of `cameraSettings`. Subsequent reads from it will return its default value.
  mutating func clearCameraSettings() {self._cameraSettings = nil}

  /// ResultSettings
  var resultSettings: ResultSettings {
    get {return _resultSettings ?? ResultSettings()}
    set {_resultSettings = newValue}
  }
  /// Returns true if `resultSettings` has been explicitly set.
  var hasResultSettings: Bool {return self._resultSettings != nil}
  /// Clears the value of `resultSettings`. Subsequent reads from it will return its default value.
  mutating func clearResultSettings() {self._resultSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cameraSettings: CameraSettings? = nil
  fileprivate var _resultSettings: ResultSettings? = nil
}

/// protos/result_settings.proto
struct ResultSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Beep on Scan
  var beepOnScan: Bool = false

  /// Vibrate on Scan
  var vibrateOnScan: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ScanResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Represents the type of the result
  var type: ResultType = .barcode

  /// The barcode itself if the result type is barcode.
  /// If the result type is error it contains the error message
  var rawContent: String = String()

  /// The barcode format
  var format: BarcodeFormat = .all

  /// If the format is unknown, this field holds additional information
  var formatNote: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension BarcodeFormat: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "all"),
    1: .same(proto: "code39"),
    2: .same(proto: "code93"),
    3: .same(proto: "code128"),
    4: .same(proto: "itf"),
    5: .same(proto: "upce"),
    6: .same(proto: "ean8"),
    7: .same(proto: "ean13"),
    8: .same(proto: "codaBar"),
    9: .same(proto: "gs1DataBar"),
    10: .same(proto: "gs1DataBarExtended"),
    11: .same(proto: "qr"),
    12: .same(proto: "pdf417"),
    13: .same(proto: "dataMatrix"),
    14: .same(proto: "aztec"),
    15: .same(proto: "unknown"),
  ]
}

extension ResolutionPreset: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "hd1280x720"),
    1: .same(proto: "hd1920x1080"),
  ]
}

extension CameraPosition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "font"),
    1: .same(proto: "back"),
  ]
}

extension ResultType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Barcode"),
    1: .same(proto: "Cancelled"),
    2: .same(proto: "Error"),
  ]
}

extension BarcodeResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BarcodeResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "format"),
    2: .same(proto: "rawValue"),
    3: .same(proto: "rawBytes"),
    4: .same(proto: "boundingBox"),
    5: .same(proto: "cornerPoints"),
    6: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.format) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rawValue) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.rawBytes) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._boundingBox) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.cornerPoints) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.format != .all {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 1)
    }
    if !self.rawValue.isEmpty {
      try visitor.visitSingularStringField(value: self.rawValue, fieldNumber: 2)
    }
    if !self.rawBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.rawBytes, fieldNumber: 3)
    }
    try { if let v = self._boundingBox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.cornerPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cornerPoints, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BarcodeResult, rhs: BarcodeResult) -> Bool {
    if lhs.format != rhs.format {return false}
    if lhs.rawValue != rhs.rawValue {return false}
    if lhs.rawBytes != rhs.rawBytes {return false}
    if lhs._boundingBox != rhs._boundingBox {return false}
    if lhs.cornerPoints != rhs.cornerPoints {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Rect"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "left"),
    2: .same(proto: "top"),
    3: .same(proto: "right"),
    4: .same(proto: "bottom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.left) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.top) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.right) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.bottom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.left.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.left, fieldNumber: 1)
    }
    if self.top.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.top, fieldNumber: 2)
    }
    if self.right.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.right, fieldNumber: 3)
    }
    if self.bottom.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.bottom, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Rect, rhs: Rect) -> Bool {
    if lhs.left != rhs.left {return false}
    if lhs.top != rhs.top {return false}
    if lhs.right != rhs.right {return false}
    if lhs.bottom != rhs.bottom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Point"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.y) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Point, rhs: Point) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CameraSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CameraSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resolutionPreset"),
    2: .same(proto: "cameraPosition"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.resolutionPreset) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.cameraPosition) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resolutionPreset != .hd1280X720 {
      try visitor.visitSingularEnumField(value: self.resolutionPreset, fieldNumber: 1)
    }
    if self.cameraPosition != .font {
      try visitor.visitSingularEnumField(value: self.cameraPosition, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CameraSettings, rhs: CameraSettings) -> Bool {
    if lhs.resolutionPreset != rhs.resolutionPreset {return false}
    if lhs.cameraPosition != rhs.cameraPosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Configuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Configuration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "barcodeFormats"),
    2: .same(proto: "cameraSettings"),
    3: .same(proto: "resultSettings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.barcodeFormats) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._cameraSettings) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resultSettings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.barcodeFormats.isEmpty {
      try visitor.visitPackedEnumField(value: self.barcodeFormats, fieldNumber: 1)
    }
    try { if let v = self._cameraSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._resultSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Configuration, rhs: Configuration) -> Bool {
    if lhs.barcodeFormats != rhs.barcodeFormats {return false}
    if lhs._cameraSettings != rhs._cameraSettings {return false}
    if lhs._resultSettings != rhs._resultSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResultSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ResultSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "beepOnScan"),
    2: .same(proto: "vibrateOnScan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.beepOnScan) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.vibrateOnScan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.beepOnScan != false {
      try visitor.visitSingularBoolField(value: self.beepOnScan, fieldNumber: 1)
    }
    if self.vibrateOnScan != false {
      try visitor.visitSingularBoolField(value: self.vibrateOnScan, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ResultSettings, rhs: ResultSettings) -> Bool {
    if lhs.beepOnScan != rhs.beepOnScan {return false}
    if lhs.vibrateOnScan != rhs.vibrateOnScan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "rawContent"),
    3: .same(proto: "format"),
    4: .same(proto: "formatNote"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rawContent) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.format) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.formatNote) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .barcode {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.rawContent.isEmpty {
      try visitor.visitSingularStringField(value: self.rawContent, fieldNumber: 2)
    }
    if self.format != .all {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 3)
    }
    if !self.formatNote.isEmpty {
      try visitor.visitSingularStringField(value: self.formatNote, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ScanResult, rhs: ScanResult) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.rawContent != rhs.rawContent {return false}
    if lhs.format != rhs.format {return false}
    if lhs.formatNote != rhs.formatNote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
